#!/usr/bin/env node

/**
 * Module dependencies.
 */
try {
	require(require.resolve("coffee-script"));
} catch (err) {
	console.log(err);
	process.exit(1);
}

var migrate = require('../')
  , join = require('path').join
  , fs = require('fs');

var isCoffee = false;

/**
 * Arguments.
 */

var args = process.argv.slice(2);

/**
 * Option defaults.
 */

var options = { args: [] };

/**
 * Current working directory.
 */

var cwd;

/**
 * Usage information.
 */

var env = process.env.NODE_ENV;

var usage = [
    ''
  , '  Usage: migrate [options] [command]'
  , ''
  , '  Options:'
  , ''
  , '     -c, --chdir <path>            change the working directory'
  , '     -coffee, --coffee-script      coffee script migrations'
  , '     -streamline                   streamline.js migrations'
  , '     -pg, --psql                   use pg migration template'
  , ''
  , '  Commands:'
  , ''
  , '     down   [name]    migrate down till given migration'
  , '     up     [name]    migrate up till given migration (the default command)'
  , '     create [title]   create a new migration file with optional [title]'
  , ''

].join('\n');

/**
 * Migration template.
 */
var template = [
  'exports.up = function(next){'
  , ' next();'
  , '};'
  , ''
  , 'exports.down = function(next){'
  , ' next();'
  , '};'
].join('\n');

var psql_template = [
  'var db = require(\'db\');'
  , ''
  , 'exports.up = function(next) {'
  , '  var query = \'\';'
  , '  execResult(query, next);'
  , '};'
  , ''
  , 'exports.down = function(next) {'
  , '  var query = \'\';'
  , '  execResult(query, next);'
  , '};'
  , ''
  , 'var execResult = function(query, next) {'
  , '  db.query(query, function(err) {'
  , '    if(err) {'
  , '      console.error(err);'
  , '      process.exit(1);'
  , '    } else {'
  , '      next();'
  , '    }'
  , '  });'
  , '};'
].join('\n');


var coffee_template = [
	'exports.up = (next) ->'
	, '  next()'
	, ''
	,'exports.down = (next) ->'
	, '  next()'
].join('\n');

var psql_coffee_template = [
	'db = require \'db\''
	,'exports.up = (next) ->'
	, '  query = \'\''
	, '  execResult query, next'
	, ''
	, 'exports.down = (next) ->'
	, '  query = \'\''
	, '  execResult query, next'
	, ''
	, 'execResult = (query, next) ->'
	, '  db.query query, (err) ->'
	, '    if err'
	, '      console.error err'
	, '      process.exit(1)'
	, '    else'
	, '      next()'
].join('\n');

// require an argument

function required() {
  if (args.length) return args.shift();
  abort(arg + ' requires an argument');
}

// abort with a message

function abort(msg) {
  console.error('  %s', msg);
  process.exit(1);
}

// parse arguments

var arg;
while (args.length) {
  arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
    case 'help':
      console.log(usage);
      process.exit();
      break;
    case '-c':
    case '--chdir':
      process.chdir(cwd = required());
      break;
	case '-pg':
	case '--psql':
	  template = psql_template;
	  coffee_template = psql_coffee_template;
      break;
    case '-coffee':
    case '--coffee-script':
      isCoffee = true;
      break;
    case '-streamline':
      require('streamline/register');
      break;
    default:
      if (options.command) {
        options.args.push(arg);
      } else {
        options.command = arg;
      }
  }
}

log('coffee-script environment', isCoffee);

/**
 * Load migrations.
 */

function migrations() {
  var reqexp = new RegExp("^\\d+.*\\.?(js" + (isCoffee ? "|coffee" : "") + ")$");
  return fs.readdirSync('migrations').filter(function(file){
    return file.match(reqexp);
  }).sort().map(function(file){
    return 'migrations/' + file;
  });
}

/**
 * Log a keyed message.
 */

function log(key, msg) {
  console.log('  \033[90m%s :\033[0m \033[36m%s\033[0m', key, msg);
}

/**
 * Slugify the given `str`.
 */

function slugify(str) {
  return str.replace(/\s+/g, '-');
}

// create ./migrations

try {
  fs.mkdirSync('migrations', 0774);
} catch (err) {
  // ignore
}

// commands

var commands = {

  /**
   * up [name]
   */

  up: function(migrationName){
    performMigration('up', migrationName);
  },

  /**
   * down [name]
   */

  down: function(migrationName){
    performMigration('down', migrationName);
  },

  /**
   * create [title]
   */

  create: function(){
    var curr = Date.now()
      , title = slugify([].slice.call(arguments).join(' '));
    title = title ? curr + '-' + title : curr;
    create(title);
  }
};

/**
 * Create a migration with the given `name`.
 *
 * @param {String} name
 */

function create(name) {
  var path = 'migrations/' + name + (isCoffee ? '.coffee' : '.js');
  log('create', join(cwd, path));
  fs.writeFileSync(path, isCoffee ? coffee_template : template);
}

/**
 * Perform a migration in the given `direction`.
 *
 * @param {Number} direction
 */

function performMigration(direction, migrationName) {
  var fileName = '.migrate';
  if(env) {
	  fileName += '-' + env;
  }
  migrate('migrations/' + fileName);
  migrations().forEach(function(path){
    var mod = require(process.cwd() + '/' + path);
    migrate(path, mod.up, mod.down, env);
  });

  var set = migrate();

  set.on('migration', function(migration, direction){
    log(direction, migration.title);
  });

  set.on('save', function(){
    log('migration', 'complete');
    process.exit();
  });

  var migrationPath = migrationName
    ? join('migrations', migrationName)
    : migrationName;

  set[direction](null, migrationPath);
}

// invoke command

var command = options.command || 'up';
if (!(command in commands)) abort('unknown command "' + command + '"');
command = commands[command];
command.apply(this, options.args);
